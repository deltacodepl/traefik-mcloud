version: "3.8"

networks:
  proxy:
    external: true
  immich:

services:
  immich-server:
    container_name: immich_server
    image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
    command: ["start.sh", "immich"]
    volumes:
      - ${UPLOAD_LOCATION}:/usr/src/app/upload
      # - ${READ_ONLY_GALLERY_LOCATION_1}:${READ_ONLY_GALLERY_LOCATION_1}
    env_file:
      - .env
    #     ports:
    #  - 2283:3001
    depends_on:
      - redis
      - database
    restart: always
    networks:
      - proxy
      - immich
    labels:
      traefik.enable: true
      traefik.http.routers.immich-api-router.entrypoints: https
      traefik.http.routers.immich-api-router.rule: "Host(`$IMMICH_URL`)"
      traefik.docker.network: proxy # Specify which network to use for traefik, since there are multiple network defined
      traefik.http.routers.immich-api-router.priority: 20
      traefik.http.routers.immich-api-router.middlewares: immich_api_secure_headers,immich_limit
      traefik.http.services.immich-api-service.loadbalancer.server.port: "3001"

      # body limit middleware
      traefik.http.middlewares.immich_limit.buffering.maxRequestBodyBytes: 10000000000
      traefik.http.middlewares.immich_limit.buffering.maxResponseBodyBytes: 10000000000
      traefik.http.middlewares.immich_limit.buffering.memRequestBodyBytes: 10000000000
      traefik.http.middlewares.immich_limit.buffering.memResponseBodyBytes: 10000000000
      traefik.http.middlewares.immich_limit.buffering.retryExpression: IsNetworkError() && Attempts() < 2

      # immich_api_secure_headers middleware
      traefik.http.middlewares.immich_api_secure_headers.headers.accessControlAllowMethods: "GET, OPTIONS, PUT"
      traefik.http.middlewares.immich_api_secure_headers.headers.accessControlMaxAge: 100
      traefik.http.middlewares.immich_api_secure_headers.headers.hostsProxyHeaders: "X-Forwarded-Host"
      # traefik.http.middlewares.immich_api_secure_headers.headers.sslRedirect: true  #replaced with middlewares-https-redirectscheme for v2.5.x
      traefik.http.middlewares.immich_api_secure_headers.headers.stsSeconds: 63072000
      traefik.http.middlewares.immich_api_secure_headers.headers.stsIncludeSubdomains: true
      traefik.http.middlewares.immich_api_secure_headers.headers.stsPreload: true
      traefik.http.middlewares.immich_api_secure_headers.headers.forceSTSHeader: true
      # traefik.http.middlewares.immich_api_secure_headers.headers.frameDeny: true #overwritten by customFrameOptionsValue
      traefik.http.middlewares.immich_api_secure_headers.headers.customFrameOptionsValue: "SAMEORIGIN" #CSP takes care of this but may be needed for organizr.
      traefik.http.middlewares.immich_api_secure_headers.headers.contentTypeNosniff: true
      traefik.http.middlewares.immich_api_secure_headers.headers.browserXssFilter: true
      # traefik.http.middlewares.immich_api_secure_headers.headers.sslForceHost: true # add sslHost to all of the services
      # traefik.http.middlewares.immich_api_secure_headers.headers.sslHost: "{{env "DOMAINNAME_SHB"}}"
      traefik.http.middlewares.immich_api_secure_headers.headers.referrerPolicy: "same-origin"

  immich-microservices:
    container_name: immich_microservices
    image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
    command: ["start.sh", "microservices"]
    volumes:
      - ${UPLOAD_LOCATION}:/usr/src/app/upload
      # - ${READ_ONLY_GALLERY_LOCATION_1}:${READ_ONLY_GALLERY_LOCATION_1}
    env_file:
      - .env
    depends_on:
      - redis
      - database
    restart: always
    networks:
      - immich

  immich-machine-learning:
    container_name: immich_machine_learning
    image: ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release}
    volumes:
      - model-cache:/cache
    env_file:
      - .env
    restart: always
    networks:
      - immich

  redis:
    container_name: immich_redis
    image: redis:6.2-alpine@sha256:70a7a5b641117670beae0d80658430853896b5ef269ccf00d1827427e3263fa3
    restart: always
    volumes:
      - ./volumes/immich/redis.conf:/etc/redis.conf
      - /etc/TZ:/etc/timezone:ro
      - ./volumes/immich/redisdb:/db
    networks:
      - immich

  database:
    container_name: immich_postgres
    image: tensorchord/pgvecto-rs:pg14-v0.2.0@sha256:90724186f0a3517cf6914295b5ab410db9ce23190a2d9d0b9dd6463e3fa298f0
    env_file:
      - .env
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_DB: ${DB_DATABASE_NAME}
      PG_DATA: /var/lib/postgresql/data
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: always
    networks:
      - immich

  # Container for backing up the database
  # https://documentation.immich.app/docs/administration/backup-and-restore
  backup:
    container_name: immich_db_dumper
    image: prodrigestivill/postgres-backup-local
    env_file:
      - .env
    environment:
      POSTGRES_HOST: ${DB_HOSTNAME}
      POSTGRES_DB: ${DB_DATABASE_NAME}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      SCHEDULE: "@daily"
      BACKUP_NUM_KEEP: 7
      BACKUP_DIR: /db_dumps
    volumes:
      - ${UPLOAD_LOCATION}/db_dumps:/db_dumps
    depends_on:
      - database

volumes:
  pgdata:
  model-cache:
